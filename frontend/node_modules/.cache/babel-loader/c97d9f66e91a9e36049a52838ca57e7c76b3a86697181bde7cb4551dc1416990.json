{"ast":null,"code":"function redirect(opts) {\n  opts.isRedirect = true;\n  opts.statusCode = opts.statusCode || opts.code || 307;\n  opts.headers = opts.headers || {};\n  if (!opts.reloadDocument) {\n    opts.reloadDocument = false;\n    try {\n      new URL(`${opts.href}`);\n      opts.reloadDocument = true;\n    } catch {}\n  }\n  if (opts.throw) {\n    throw opts;\n  }\n  return opts;\n}\nfunction isRedirect(obj) {\n  return !!(obj == null ? void 0 : obj.isRedirect);\n}\nfunction isResolvedRedirect(obj) {\n  return !!(obj == null ? void 0 : obj.isRedirect) && obj.href;\n}\nexport { isRedirect, isResolvedRedirect, redirect };","map":{"version":3,"names":["redirect","opts","isRedirect","statusCode","code","headers","reloadDocument","URL","href","throw","obj","isResolvedRedirect"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/router-core/src/redirect.ts"],"sourcesContent":["import type { NavigateOptions } from './link'\nimport type { AnyRouter, RegisteredRouter } from './router'\nimport type { PickAsRequired } from './utils'\n\nexport type AnyRedirect = Redirect<any, any, any, any, any>\n\n/**\n * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType)\n */\nexport type Redirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = undefined,\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = {\n  href?: string\n  /**\n   * @deprecated Use `statusCode` instead\n   **/\n  code?: number\n  /**\n   * The HTTP status code to use when redirecting.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType#statuscode-property)\n   */\n  statusCode?: number\n  /**\n   * If provided, will throw the redirect object instead of returning it. This can be useful in places where `throwing` in a function might cause it to have a return type of `never`. In that case, you can use `redirect({ throw: true })` to throw the redirect object instead of returning it.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType#throw-property)\n   */\n  throw?: any\n  /**\n   * The HTTP headers to use when redirecting.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RedirectType#headers-property)\n   */\n  headers?: HeadersInit\n} & NavigateOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>\n\nexport type ResolvedRedirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string = '',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '',\n> = PickAsRequired<\n  Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n  'code' | 'statusCode' | 'headers'\n> & {\n  href: string\n}\n\nexport function redirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  const TTo extends string | undefined = '.',\n  const TFrom extends string = string,\n  const TMaskFrom extends string = TFrom,\n  const TMaskTo extends string = '',\n>(\n  opts: Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n): Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo> {\n  ;(opts as any).isRedirect = true\n  opts.statusCode = opts.statusCode || opts.code || 307\n  opts.headers = opts.headers || {}\n  if (!opts.reloadDocument) {\n    opts.reloadDocument = false\n    try {\n      new URL(`${opts.href}`)\n      opts.reloadDocument = true\n    } catch {}\n  }\n\n  if (opts.throw) {\n    throw opts\n  }\n\n  return opts\n}\n\nexport function isRedirect(obj: any): obj is AnyRedirect {\n  return !!obj?.isRedirect\n}\n\nexport function isResolvedRedirect(obj: any): obj is ResolvedRedirect {\n  return !!obj?.isRedirect && obj.href\n}\n"],"mappings":"AAmDO,SAASA,SAOdC,IAAA,EACmD;EACjDA,IAAA,CAAaC,UAAA,GAAa;EAC5BD,IAAA,CAAKE,UAAA,GAAaF,IAAA,CAAKE,UAAA,IAAcF,IAAA,CAAKG,IAAA,IAAQ;EAC7CH,IAAA,CAAAI,OAAA,GAAUJ,IAAA,CAAKI,OAAA,IAAW,CAAC;EAC5B,KAACJ,IAAA,CAAKK,cAAA,EAAgB;IACxBL,IAAA,CAAKK,cAAA,GAAiB;IAClB;MACF,IAAIC,GAAA,CAAI,GAAGN,IAAA,CAAKO,IAAI,EAAE;MACtBP,IAAA,CAAKK,cAAA,GAAiB;IAAA,QAChB;EAAC;EAGX,IAAIL,IAAA,CAAKQ,KAAA,EAAO;IACR,MAAAR,IAAA;EAAA;EAGD,OAAAA,IAAA;AACT;AAEO,SAASC,WAAWQ,GAAA,EAA8B;EAChD,QAAC,EAACA,GAAA,oBAAAA,GAAA,CAAKR,UAAA;AAChB;AAEO,SAASS,mBAAmBD,GAAA,EAAmC;EACpE,OAAO,CAAC,EAACA,GAAA,oBAAAA,GAAA,CAAKR,UAAA,KAAcQ,GAAA,CAAIF,IAAA;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}