{"ast":null,"code":"import { deepEqual } from \"./utils.js\";\nfunction retainSearchParams(keys) {\n  return ({\n    search,\n    next\n  }) => {\n    const result = next(search);\n    if (keys === true) {\n      return {\n        ...search,\n        ...result\n      };\n    }\n    keys.forEach(key => {\n      if (!(key in result)) {\n        result[key] = search[key];\n      }\n    });\n    return result;\n  };\n}\nfunction stripSearchParams(input) {\n  return ({\n    search,\n    next\n  }) => {\n    if (input === true) {\n      return {};\n    }\n    const result = next(search);\n    if (Array.isArray(input)) {\n      input.forEach(key => {\n        delete result[key];\n      });\n    } else {\n      Object.entries(input).forEach(([key, value]) => {\n        if (deepEqual(result[key], value)) {\n          delete result[key];\n        }\n      });\n    }\n    return result;\n  };\n}\nexport { retainSearchParams, stripSearchParams };","map":{"version":3,"names":["retainSearchParams","keys","search","next","result","forEach","key","stripSearchParams","input","Array","isArray","Object","entries","value","deepEqual"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/router-core/src/searchMiddleware.ts"],"sourcesContent":["import { deepEqual } from './utils'\nimport type { NoInfer, PickOptional } from './utils'\nimport type { SearchMiddleware } from './route'\nimport type { IsRequiredParams } from './link'\n\nexport function retainSearchParams<TSearchSchema extends object>(\n  keys: Array<keyof TSearchSchema> | true,\n): SearchMiddleware<TSearchSchema> {\n  return ({ search, next }) => {\n    const result = next(search)\n    if (keys === true) {\n      return { ...search, ...result }\n    }\n    // add missing keys from search to result\n    keys.forEach((key) => {\n      if (!(key in result)) {\n        result[key] = search[key]\n      }\n    })\n    return result\n  }\n}\n\nexport function stripSearchParams<\n  TSearchSchema,\n  TOptionalProps = PickOptional<NoInfer<TSearchSchema>>,\n  const TValues =\n    | Partial<NoInfer<TOptionalProps>>\n    | Array<keyof TOptionalProps>,\n  const TInput = IsRequiredParams<TSearchSchema> extends never\n    ? TValues | true\n    : TValues,\n>(input: NoInfer<TInput>): SearchMiddleware<TSearchSchema> {\n  return ({ search, next }) => {\n    if (input === true) {\n      return {}\n    }\n    const result = next(search) as Record<string, unknown>\n    if (Array.isArray(input)) {\n      input.forEach((key) => {\n        delete result[key]\n      })\n    } else {\n      Object.entries(input as Record<string, unknown>).forEach(\n        ([key, value]) => {\n          if (deepEqual(result[key], value)) {\n            delete result[key]\n          }\n        },\n      )\n    }\n    return result as any\n  }\n}\n"],"mappings":";AAKO,SAASA,mBACdC,IAAA,EACiC;EACjC,OAAO,CAAC;IAAEC,MAAA;IAAQC;EAAA,MAAW;IACrB,MAAAC,MAAA,GAASD,IAAA,CAAKD,MAAM;IAC1B,IAAID,IAAA,KAAS,MAAM;MACjB,OAAO;QAAE,GAAGC,MAAA;QAAQ,GAAGE;MAAO;IAAA;IAG3BH,IAAA,CAAAI,OAAA,CAASC,GAAA,IAAQ;MAChB,MAAEA,GAAA,IAAOF,MAAA,GAAS;QACbA,MAAA,CAAAE,GAAG,IAAIJ,MAAA,CAAOI,GAAG;MAAA;IAC1B,CACD;IACM,OAAAF,MAAA;EACT;AACF;AAEO,SAASG,kBASdC,KAAA,EAAyD;EACzD,OAAO,CAAC;IAAEN,MAAA;IAAQC;EAAA,MAAW;IAC3B,IAAIK,KAAA,KAAU,MAAM;MAClB,OAAO,CAAC;IAAA;IAEJ,MAAAJ,MAAA,GAASD,IAAA,CAAKD,MAAM;IACtB,IAAAO,KAAA,CAAMC,OAAA,CAAQF,KAAK,GAAG;MAClBA,KAAA,CAAAH,OAAA,CAASC,GAAA,IAAQ;QACrB,OAAOF,MAAA,CAAOE,GAAG;MAAA,CAClB;IAAA,OACI;MACEK,MAAA,CAAAC,OAAA,CAAQJ,KAAgC,EAAEH,OAAA,CAC/C,CAAC,CAACC,GAAA,EAAKO,KAAK,MAAM;QAChB,IAAIC,SAAA,CAAUV,MAAA,CAAOE,GAAG,GAAGO,KAAK,GAAG;UACjC,OAAOT,MAAA,CAAOE,GAAG;QAAA;MACnB,CAEJ;IAAA;IAEK,OAAAF,MAAA;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}