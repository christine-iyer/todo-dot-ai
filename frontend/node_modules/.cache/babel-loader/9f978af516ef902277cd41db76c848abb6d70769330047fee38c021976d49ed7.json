{"ast":null,"code":"import warning from \"tiny-warning\";\nimport { createRoute } from \"./route.js\";\nimport { useMatch } from \"./useMatch.js\";\nimport { useLoaderDeps } from \"./useLoaderDeps.js\";\nimport { useLoaderData } from \"./useLoaderData.js\";\nimport { useSearch } from \"./useSearch.js\";\nimport { useParams } from \"./useParams.js\";\nimport { useNavigate } from \"./useNavigate.js\";\nimport { useRouter } from \"./useRouter.js\";\nfunction createFileRoute(path) {\n  return new FileRoute(path, {\n    silent: true\n  }).createRoute;\n}\nclass FileRoute {\n  constructor(path, _opts) {\n    this.path = path;\n    this.createRoute = options => {\n      warning(this.silent, \"FileRoute is deprecated and will be removed in the next major version. Use the createFileRoute(path)(options) function instead.\");\n      const route = createRoute(options);\n      route.isRoot = false;\n      return route;\n    };\n    this.silent = _opts == null ? void 0 : _opts.silent;\n  }\n}\nfunction FileRouteLoader(_path) {\n  warning(false, `FileRouteLoader is deprecated and will be removed in the next major version. Please place the loader function in the the main route file, inside the \\`createFileRoute('/path/to/file')(options)\\` options`);\n  return loaderFn => loaderFn;\n}\nclass LazyRoute {\n  constructor(opts) {\n    this.useMatch = opts2 => {\n      return useMatch({\n        select: opts2 == null ? void 0 : opts2.select,\n        from: this.options.id,\n        structuralSharing: opts2 == null ? void 0 : opts2.structuralSharing\n      });\n    };\n    this.useRouteContext = opts2 => {\n      return useMatch({\n        from: this.options.id,\n        select: d => (opts2 == null ? void 0 : opts2.select) ? opts2.select(d.context) : d.context\n      });\n    };\n    this.useSearch = opts2 => {\n      return useSearch({\n        select: opts2 == null ? void 0 : opts2.select,\n        structuralSharing: opts2 == null ? void 0 : opts2.structuralSharing,\n        from: this.options.id\n      });\n    };\n    this.useParams = opts2 => {\n      return useParams({\n        select: opts2 == null ? void 0 : opts2.select,\n        structuralSharing: opts2 == null ? void 0 : opts2.structuralSharing,\n        from: this.options.id\n      });\n    };\n    this.useLoaderDeps = opts2 => {\n      return useLoaderDeps({\n        ...opts2,\n        from: this.options.id\n      });\n    };\n    this.useLoaderData = opts2 => {\n      return useLoaderData({\n        ...opts2,\n        from: this.options.id\n      });\n    };\n    this.useNavigate = () => {\n      const router = useRouter();\n      return useNavigate({\n        from: router.routesById[this.options.id].fullPath\n      });\n    };\n    this.options = opts;\n    this.$$typeof = Symbol.for(\"react.memo\");\n  }\n}\nfunction createLazyRoute(id) {\n  return opts => {\n    return new LazyRoute({\n      id,\n      ...opts\n    });\n  };\n}\nfunction createLazyFileRoute(id) {\n  return opts => new LazyRoute({\n    id,\n    ...opts\n  });\n}\nexport { FileRoute, FileRouteLoader, LazyRoute, createFileRoute, createLazyFileRoute, createLazyRoute };","map":{"version":3,"names":["createFileRoute","path","FileRoute","silent","createRoute","constructor","_opts","options","warning","route","isRoot","FileRouteLoader","_path","loaderFn","LazyRoute","opts","useMatch","opts2","select","from","id","structuralSharing","useRouteContext","d","context","useSearch","useParams","useLoaderDeps","useLoaderData","useNavigate","router","useRouter","routesById","fullPath","$$typeof","Symbol","for","createLazyRoute","createLazyFileRoute"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/fileRoute.ts"],"sourcesContent":["import warning from 'tiny-warning'\nimport { createRoute } from './route'\n\nimport { useMatch } from './useMatch'\nimport { useLoaderDeps } from './useLoaderDeps'\nimport { useLoaderData } from './useLoaderData'\nimport { useSearch } from './useSearch'\nimport { useParams } from './useParams'\nimport { useNavigate } from './useNavigate'\nimport { useRouter } from './useRouter'\nimport type { UseParamsRoute } from './useParams'\nimport type { UseMatchRoute } from './useMatch'\nimport type { UseSearchRoute } from './useSearch'\nimport type {\n  AnyContext,\n  AnyRoute,\n  AnyRouter,\n  Constrain,\n  ConstrainLiteral,\n  FileBaseRouteOptions,\n  FileRoutesByPath,\n  LazyRouteOptions,\n  RegisteredRouter,\n  ResolveParams,\n  Route,\n  RouteById,\n  RouteConstraints,\n  RouteIds,\n  RouteLoaderFn,\n  UpdatableRouteOptions,\n} from '@tanstack/router-core'\nimport type { UseLoaderDepsRoute } from './useLoaderDeps'\nimport type { UseLoaderDataRoute } from './useLoaderData'\nimport type { UseRouteContextRoute } from './useRouteContext'\n\nexport function createFileRoute<\n  TFilePath extends keyof FileRoutesByPath,\n  TParentRoute extends AnyRoute = FileRoutesByPath[TFilePath]['parentRoute'],\n  TId extends RouteConstraints['TId'] = FileRoutesByPath[TFilePath]['id'],\n  TPath extends RouteConstraints['TPath'] = FileRoutesByPath[TFilePath]['path'],\n  TFullPath extends\n    RouteConstraints['TFullPath'] = FileRoutesByPath[TFilePath]['fullPath'],\n>(\n  path: TFilePath,\n): FileRoute<TFilePath, TParentRoute, TId, TPath, TFullPath>['createRoute'] {\n  return new FileRoute<TFilePath, TParentRoute, TId, TPath, TFullPath>(path, {\n    silent: true,\n  }).createRoute\n}\n\n/** \n  @deprecated It's no longer recommended to use the `FileRoute` class directly.\n  Instead, use `createFileRoute('/path/to/file')(options)` to create a file route.\n*/\nexport class FileRoute<\n  TFilePath extends keyof FileRoutesByPath,\n  TParentRoute extends AnyRoute = FileRoutesByPath[TFilePath]['parentRoute'],\n  TId extends RouteConstraints['TId'] = FileRoutesByPath[TFilePath]['id'],\n  TPath extends RouteConstraints['TPath'] = FileRoutesByPath[TFilePath]['path'],\n  TFullPath extends\n    RouteConstraints['TFullPath'] = FileRoutesByPath[TFilePath]['fullPath'],\n> {\n  silent?: boolean\n\n  constructor(\n    public path: TFilePath,\n    _opts?: { silent: boolean },\n  ) {\n    this.silent = _opts?.silent\n  }\n\n  createRoute = <\n    TSearchValidator = undefined,\n    TParams = ResolveParams<TPath>,\n    TRouteContextFn = AnyContext,\n    TBeforeLoadFn = AnyContext,\n    TLoaderDeps extends Record<string, any> = {},\n    TLoaderFn = undefined,\n    TChildren = unknown,\n  >(\n    options?: FileBaseRouteOptions<\n      TParentRoute,\n      TId,\n      TPath,\n      TSearchValidator,\n      TParams,\n      TLoaderDeps,\n      TLoaderFn,\n      AnyContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    > &\n      UpdatableRouteOptions<\n        TParentRoute,\n        TId,\n        TFullPath,\n        TParams,\n        TSearchValidator,\n        TLoaderFn,\n        TLoaderDeps,\n        AnyContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n  ): Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TFilePath,\n    TId,\n    TSearchValidator,\n    TParams,\n    AnyContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren,\n    unknown\n  > => {\n    warning(\n      this.silent,\n      'FileRoute is deprecated and will be removed in the next major version. Use the createFileRoute(path)(options) function instead.',\n    )\n    const route = createRoute(options as any)\n    ;(route as any).isRoot = false\n    return route as any\n  }\n}\n\n/** \n  @deprecated It's recommended not to split loaders into separate files.\n  Instead, place the loader function in the the main route file, inside the\n  `createFileRoute('/path/to/file)(options)` options.\n*/\nexport function FileRouteLoader<\n  TFilePath extends keyof FileRoutesByPath,\n  TRoute extends FileRoutesByPath[TFilePath]['preLoaderRoute'],\n>(\n  _path: TFilePath,\n): <TLoaderFn>(\n  loaderFn: Constrain<\n    TLoaderFn,\n    RouteLoaderFn<\n      TRoute['parentRoute'],\n      TRoute['types']['id'],\n      TRoute['types']['params'],\n      TRoute['types']['loaderDeps'],\n      TRoute['types']['routerContext'],\n      TRoute['types']['routeContextFn'],\n      TRoute['types']['beforeLoadFn']\n    >\n  >,\n) => TLoaderFn {\n  warning(\n    false,\n    `FileRouteLoader is deprecated and will be removed in the next major version. Please place the loader function in the the main route file, inside the \\`createFileRoute('/path/to/file')(options)\\` options`,\n  )\n  return (loaderFn) => loaderFn as any\n}\n\nexport class LazyRoute<TRoute extends AnyRoute> {\n  options: {\n    id: string\n  } & LazyRouteOptions\n\n  constructor(\n    opts: {\n      id: string\n    } & LazyRouteOptions,\n  ) {\n    this.options = opts\n    ;(this as any).$$typeof = Symbol.for('react.memo')\n  }\n\n  useMatch: UseMatchRoute<TRoute['id']> = (opts) => {\n    return useMatch({\n      select: opts?.select,\n      from: this.options.id,\n      structuralSharing: opts?.structuralSharing,\n    } as any) as any\n  }\n\n  useRouteContext: UseRouteContextRoute<TRoute['id']> = (opts) => {\n    return useMatch({\n      from: this.options.id,\n      select: (d: any) => (opts?.select ? opts.select(d.context) : d.context),\n    }) as any\n  }\n\n  useSearch: UseSearchRoute<TRoute['id']> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useSearch({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.options.id,\n    } as any) as any\n  }\n\n  useParams: UseParamsRoute<TRoute['id']> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useParams({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.options.id,\n    } as any) as any\n  }\n\n  useLoaderDeps: UseLoaderDepsRoute<TRoute['id']> = (opts) => {\n    return useLoaderDeps({ ...opts, from: this.options.id } as any)\n  }\n\n  useLoaderData: UseLoaderDataRoute<TRoute['id']> = (opts) => {\n    return useLoaderData({ ...opts, from: this.options.id } as any)\n  }\n\n  useNavigate = () => {\n    const router = useRouter()\n    return useNavigate({ from: router.routesById[this.options.id].fullPath })\n  }\n}\n\nexport function createLazyRoute<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TId extends string = string,\n  TRoute extends AnyRoute = RouteById<TRouter['routeTree'], TId>,\n>(id: ConstrainLiteral<TId, RouteIds<TRouter['routeTree']>>) {\n  return (opts: LazyRouteOptions) => {\n    return new LazyRoute<TRoute>({\n      id: id,\n      ...opts,\n    })\n  }\n}\n\nexport function createLazyFileRoute<\n  TFilePath extends keyof FileRoutesByPath,\n  TRoute extends FileRoutesByPath[TFilePath]['preLoaderRoute'],\n>(id: TFilePath) {\n  return (opts: LazyRouteOptions) => new LazyRoute<TRoute>({ id, ...opts })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}