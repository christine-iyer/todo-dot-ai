{"ast":null,"code":"import * as React from \"react\";\nimport { trimPathRight, getLocationChangeInfo, handleHashScroll } from \"@tanstack/router-core\";\nimport { usePrevious, useLayoutEffect } from \"./utils.js\";\nimport { useRouter } from \"./useRouter.js\";\nimport { useRouterState } from \"./useRouterState.js\";\nfunction Transitioner() {\n  const router = useRouter();\n  const mountLoadForRouter = React.useRef({\n    router,\n    mounted: false\n  });\n  const isLoading = useRouterState({\n    select: ({\n      isLoading: isLoading2\n    }) => isLoading2\n  });\n  const [isTransitioning, setIsTransitioning] = React.useState(false);\n  const hasPendingMatches = useRouterState({\n    select: s => s.matches.some(d => d.status === \"pending\"),\n    structuralSharing: true\n  });\n  const previousIsLoading = usePrevious(isLoading);\n  const isAnyPending = isLoading || isTransitioning || hasPendingMatches;\n  const previousIsAnyPending = usePrevious(isAnyPending);\n  const isPagePending = isLoading || hasPendingMatches;\n  const previousIsPagePending = usePrevious(isPagePending);\n  if (!router.isServer) {\n    router.startTransition = fn => {\n      setIsTransitioning(true);\n      React.startTransition(() => {\n        fn();\n        setIsTransitioning(false);\n      });\n    };\n  }\n  React.useEffect(() => {\n    const unsub = router.history.subscribe(router.load);\n    const nextLocation = router.buildLocation({\n      to: router.latestLocation.pathname,\n      search: true,\n      params: true,\n      hash: true,\n      state: true,\n      _includeValidateSearch: true\n    });\n    if (trimPathRight(router.latestLocation.href) !== trimPathRight(nextLocation.href)) {\n      router.commitLocation({\n        ...nextLocation,\n        replace: true\n      });\n    }\n    return () => {\n      unsub();\n    };\n  }, [router, router.history]);\n  useLayoutEffect(() => {\n    if (typeof window !== \"undefined\" && router.clientSsr || mountLoadForRouter.current.router === router && mountLoadForRouter.current.mounted) {\n      return;\n    }\n    mountLoadForRouter.current = {\n      router,\n      mounted: true\n    };\n    const tryLoad = async () => {\n      try {\n        await router.load();\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryLoad();\n  }, [router]);\n  useLayoutEffect(() => {\n    if (previousIsLoading && !isLoading) {\n      router.emit({\n        type: \"onLoad\",\n        // When the new URL has committed, when the new matches have been loaded into state.matches\n        ...getLocationChangeInfo(router.state)\n      });\n    }\n  }, [previousIsLoading, router, isLoading]);\n  useLayoutEffect(() => {\n    if (previousIsPagePending && !isPagePending) {\n      router.emit({\n        type: \"onBeforeRouteMount\",\n        ...getLocationChangeInfo(router.state)\n      });\n    }\n  }, [isPagePending, previousIsPagePending, router]);\n  useLayoutEffect(() => {\n    if (previousIsAnyPending && !isAnyPending) {\n      router.emit({\n        type: \"onResolved\",\n        ...getLocationChangeInfo(router.state)\n      });\n      router.__store.setState(s => ({\n        ...s,\n        status: \"idle\",\n        resolvedLocation: s.location\n      }));\n      handleHashScroll(router);\n    }\n  }, [isAnyPending, previousIsAnyPending, router]);\n  return null;\n}\nexport { Transitioner };","map":{"version":3,"names":["Transitioner","router","useRouter","mountLoadForRouter","React","useRef","mounted","isLoading","useRouterState","select","isLoading2","isTransitioning","setIsTransitioning","useState","hasPendingMatches","s","matches","some","d","status","structuralSharing","previousIsLoading","usePrevious","isAnyPending","previousIsAnyPending","isPagePending","previousIsPagePending","isServer","startTransition","fn","useEffect","unsub","history","subscribe","load","nextLocation","buildLocation","to","latestLocation","pathname","search","params","hash","state","_includeValidateSearch","trimPathRight","href","commitLocation","replace","useLayoutEffect","window","clientSsr","current","tryLoad","err","console","error","emit","type","getLocationChangeInfo","__store","setState","resolvedLocation","location","handleHashScroll"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/Transitioner.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  getLocationChangeInfo,\n  handleHashScroll,\n  trimPathRight,\n} from '@tanstack/router-core'\nimport { useLayoutEffect, usePrevious } from './utils'\nimport { useRouter } from './useRouter'\nimport { useRouterState } from './useRouterState'\n\nexport function Transitioner() {\n  const router = useRouter()\n  const mountLoadForRouter = React.useRef({ router, mounted: false })\n  const isLoading = useRouterState({\n    select: ({ isLoading }) => isLoading,\n  })\n\n  const [isTransitioning, setIsTransitioning] = React.useState(false)\n  // Track pending state changes\n  const hasPendingMatches = useRouterState({\n    select: (s) => s.matches.some((d) => d.status === 'pending'),\n    structuralSharing: true,\n  })\n\n  const previousIsLoading = usePrevious(isLoading)\n\n  const isAnyPending = isLoading || isTransitioning || hasPendingMatches\n  const previousIsAnyPending = usePrevious(isAnyPending)\n\n  const isPagePending = isLoading || hasPendingMatches\n  const previousIsPagePending = usePrevious(isPagePending)\n\n  if (!router.isServer) {\n    router.startTransition = (fn: () => void) => {\n      setIsTransitioning(true)\n      React.startTransition(() => {\n        fn()\n        setIsTransitioning(false)\n      })\n    }\n  }\n\n  // Subscribe to location changes\n  // and try to load the new location\n  React.useEffect(() => {\n    const unsub = router.history.subscribe(router.load)\n\n    const nextLocation = router.buildLocation({\n      to: router.latestLocation.pathname,\n      search: true,\n      params: true,\n      hash: true,\n      state: true,\n      _includeValidateSearch: true,\n    })\n\n    if (\n      trimPathRight(router.latestLocation.href) !==\n      trimPathRight(nextLocation.href)\n    ) {\n      router.commitLocation({ ...nextLocation, replace: true })\n    }\n\n    return () => {\n      unsub()\n    }\n  }, [router, router.history])\n\n  // Try to load the initial location\n  useLayoutEffect(() => {\n    if (\n      (typeof window !== 'undefined' && router.clientSsr) ||\n      (mountLoadForRouter.current.router === router &&\n        mountLoadForRouter.current.mounted)\n    ) {\n      return\n    }\n    mountLoadForRouter.current = { router, mounted: true }\n\n    const tryLoad = async () => {\n      try {\n        await router.load()\n      } catch (err) {\n        console.error(err)\n      }\n    }\n\n    tryLoad()\n  }, [router])\n\n  useLayoutEffect(() => {\n    // The router was loading and now it's not\n    if (previousIsLoading && !isLoading) {\n      router.emit({\n        type: 'onLoad', // When the new URL has committed, when the new matches have been loaded into state.matches\n        ...getLocationChangeInfo(router.state),\n      })\n    }\n  }, [previousIsLoading, router, isLoading])\n\n  useLayoutEffect(() => {\n    // emit onBeforeRouteMount\n    if (previousIsPagePending && !isPagePending) {\n      router.emit({\n        type: 'onBeforeRouteMount',\n        ...getLocationChangeInfo(router.state),\n      })\n    }\n  }, [isPagePending, previousIsPagePending, router])\n\n  useLayoutEffect(() => {\n    // The router was pending and now it's not\n    if (previousIsAnyPending && !isAnyPending) {\n      router.emit({\n        type: 'onResolved',\n        ...getLocationChangeInfo(router.state),\n      })\n\n      router.__store.setState((s) => ({\n        ...s,\n        status: 'idle',\n        resolvedLocation: s.location,\n      }))\n\n      handleHashScroll(router)\n    }\n  }, [isAnyPending, previousIsAnyPending, router])\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}