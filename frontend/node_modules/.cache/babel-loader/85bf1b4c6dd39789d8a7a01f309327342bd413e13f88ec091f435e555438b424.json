{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { defer, TSR_DEFERRED_PROMISE } from \"@tanstack/router-core\";\nfunction useAwaited({\n  promise: _promise\n}) {\n  const promise = defer(_promise);\n  if (promise[TSR_DEFERRED_PROMISE].status === \"pending\") {\n    throw promise;\n  }\n  if (promise[TSR_DEFERRED_PROMISE].status === \"error\") {\n    throw promise[TSR_DEFERRED_PROMISE].error;\n  }\n  return [promise[TSR_DEFERRED_PROMISE].data, promise];\n}\nfunction Await(props) {\n  const inner = /* @__PURE__ */jsx(AwaitInner, {\n    ...props\n  });\n  if (props.fallback) {\n    return /* @__PURE__ */jsx(React.Suspense, {\n      fallback: props.fallback,\n      children: inner\n    });\n  }\n  return inner;\n}\nfunction AwaitInner(props) {\n  const [data] = useAwaited(props);\n  return props.children(data);\n}\nexport { Await, useAwaited };","map":{"version":3,"names":["useAwaited","promise","_promise","defer","TSR_DEFERRED_PROMISE","status","error","data","Await","props","inner","jsx","AwaitInner","fallback","React","Suspense","children"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/awaited.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { TSR_DEFERRED_PROMISE, defer } from '@tanstack/router-core'\nimport type { DeferredPromise } from '@tanstack/router-core'\n\nexport type AwaitOptions<T> = {\n  promise: Promise<T>\n}\n\nexport function useAwaited<T>({\n  promise: _promise,\n}: AwaitOptions<T>): [T, DeferredPromise<T>] {\n  const promise = defer(_promise)\n\n  if (promise[TSR_DEFERRED_PROMISE].status === 'pending') {\n    throw promise\n  }\n\n  if (promise[TSR_DEFERRED_PROMISE].status === 'error') {\n    throw promise[TSR_DEFERRED_PROMISE].error\n  }\n\n  return [promise[TSR_DEFERRED_PROMISE].data, promise]\n}\n\nexport function Await<T>(\n  props: AwaitOptions<T> & {\n    fallback?: React.ReactNode\n    children: (result: T) => React.ReactNode\n  },\n) {\n  const inner = <AwaitInner {...props} />\n  if (props.fallback) {\n    return <React.Suspense fallback={props.fallback}>{inner}</React.Suspense>\n  }\n  return inner\n}\n\nfunction AwaitInner<T>(\n  props: AwaitOptions<T> & {\n    fallback?: React.ReactNode\n    children: (result: T) => React.ReactNode\n  },\n): React.JSX.Element {\n  const [data] = useAwaited(props)\n\n  return props.children(data) as React.JSX.Element\n}\n"],"mappings":";;;AASO,SAASA,WAAc;EAC5BC,OAAA,EAASC;AACX,GAA6C;EACrC,MAAAD,OAAA,GAAUE,KAAA,CAAMD,QAAQ;EAE9B,IAAID,OAAA,CAAQG,oBAAoB,EAAEC,MAAA,KAAW,WAAW;IAChD,MAAAJ,OAAA;EAAA;EAGR,IAAIA,OAAA,CAAQG,oBAAoB,EAAEC,MAAA,KAAW,SAAS;IAC9C,MAAAJ,OAAA,CAAQG,oBAAoB,EAAEE,KAAA;EAAA;EAGtC,OAAO,CAACL,OAAA,CAAQG,oBAAoB,EAAEG,IAAA,EAAMN,OAAO;AACrD;AAEO,SAASO,MACdC,KAAA,EAIA;EACA,MAAMC,KAAA,GAAQ,eAAAC,GAAA,CAACC,UAAA,EAAY;IAAA,GAAGH;EAAO;EACrC,IAAIA,KAAA,CAAMI,QAAA,EAAU;IAClB,sBAAAF,GAAA,CAAQG,KAAA,CAAMC,QAAA,EAAN;MAAeF,QAAA,EAAUJ,KAAA,CAAMI,QAAA;MAAWG,QAAA,EAAMN;IAAA;EAAA;EAEnD,OAAAA,KAAA;AACT;AAEA,SAASE,WACPH,KAAA,EAImB;EACnB,MAAM,CAACF,IAAI,IAAIP,UAAA,CAAWS,KAAK;EAExB,OAAAA,KAAA,CAAMO,QAAA,CAAST,IAAI;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}