{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport React__default from \"react\";\nfunction ClientOnly({\n  children,\n  fallback = null\n}) {\n  return useHydrated() ? /* @__PURE__ */jsx(React__default.Fragment, {\n    children\n  }) : /* @__PURE__ */jsx(React__default.Fragment, {\n    children: fallback\n  });\n}\nfunction useHydrated() {\n  return React__default.useSyncExternalStore(subscribe, () => true, () => false);\n}\nfunction subscribe() {\n  return () => {};\n}\nexport { ClientOnly };","map":{"version":3,"names":["ClientOnly","children","fallback","useHydrated","jsx","React__default","Fragment","useSyncExternalStore","subscribe"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/ClientOnly.tsx"],"sourcesContent":["import React from 'react'\n\nexport interface ClientOnlyProps {\n  /**\n   * The children to render if the JS is loaded.\n   */\n  children: React.ReactNode\n  /**\n   * The fallback component to render if the JS is not yet loaded.\n   */\n  fallback?: React.ReactNode\n}\n\n/**\n * Render the children only after the JS has loaded client-side. Use an optional\n * fallback component if the JS is not yet loaded.\n *\n * @example\n * Render a Chart component if JS loads, renders a simple FakeChart\n * component server-side or if there is no JS. The FakeChart can have only the\n * UI without the behavior or be a loading spinner or skeleton.\n *\n * ```tsx\n * return (\n *   <ClientOnly fallback={<FakeChart />}>\n *     <Chart />\n *   </ClientOnly>\n * )\n * ```\n */\nexport function ClientOnly({ children, fallback = null }: ClientOnlyProps) {\n  return useHydrated() ? (\n    <React.Fragment>{children}</React.Fragment>\n  ) : (\n    <React.Fragment>{fallback}</React.Fragment>\n  )\n}\n\n/**\n * Return a boolean indicating if the JS has been hydrated already.\n * When doing Server-Side Rendering, the result will always be false.\n * When doing Client-Side Rendering, the result will always be false on the\n * first render and true from then on. Even if a new component renders it will\n * always start with true.\n *\n * @example\n * ```tsx\n * // Disable a button that needs JS to work.\n * let hydrated = useHydrated()\n * return (\n *   <button type=\"button\" disabled={!hydrated} onClick={doSomethingCustom}>\n *     Click me\n *   </button>\n * )\n * ```\n * @returns True if the JS has been hydrated already, false otherwise.\n */\nfunction useHydrated(): boolean {\n  return React.useSyncExternalStore(\n    subscribe,\n    () => true,\n    () => false,\n  )\n}\n\nfunction subscribe() {\n  return () => {}\n}\n"],"mappings":";;AA8BO,SAASA,WAAW;EAAEC,QAAA;EAAUC,QAAA,GAAW;AAAA,GAAyB;EACzE,OAAOC,WAAA,CAAY,IAChB,eAAAC,GAAA,CAAAC,cAAA,CAAMC,QAAA,EAAN;IAAgBL;EAAS,KAEzB,eAAAG,GAAA,CAAAC,cAAA,CAAMC,QAAA,EAAN;IAAgBL,QAAA,EAASC;EAAA;AAE9B;AAqBA,SAASC,YAAA,EAAuB;EAC9B,OAAOE,cAAA,CAAME,oBAAA,CACXC,SAAA,EACA,MAAM,MACN,MAAM,KACR;AACF;AAEA,SAASA,UAAA,EAAY;EACnB,OAAO,MAAM,CAAC;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}