{"ast":null,"code":"import { defaultSerializeError } from \"./router.js\";\nconst TSR_DEFERRED_PROMISE = Symbol.for(\"TSR_DEFERRED_PROMISE\");\nfunction defer(_promise, options) {\n  const promise = _promise;\n  if (promise[TSR_DEFERRED_PROMISE]) {\n    return promise;\n  }\n  promise[TSR_DEFERRED_PROMISE] = {\n    status: \"pending\"\n  };\n  promise.then(data => {\n    promise[TSR_DEFERRED_PROMISE].status = \"success\";\n    promise[TSR_DEFERRED_PROMISE].data = data;\n  }).catch(error => {\n    promise[TSR_DEFERRED_PROMISE].status = \"error\";\n    promise[TSR_DEFERRED_PROMISE].error = {\n      data: ((options == null ? void 0 : options.serializeError) ?? defaultSerializeError)(error),\n      __isServerError: true\n    };\n  });\n  return promise;\n}\nexport { TSR_DEFERRED_PROMISE, defer };","map":{"version":3,"names":["TSR_DEFERRED_PROMISE","Symbol","for","defer","_promise","options","promise","status","then","data","catch","error","serializeError","defaultSerializeError","__isServerError"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/router-core/src/defer.ts"],"sourcesContent":["import { defaultSerializeError } from './router'\n\nexport const TSR_DEFERRED_PROMISE = Symbol.for('TSR_DEFERRED_PROMISE')\n\nexport type DeferredPromiseState<T> =\n  | {\n      status: 'pending'\n      data?: T\n      error?: unknown\n    }\n  | {\n      status: 'success'\n      data: T\n    }\n  | {\n      status: 'error'\n      data?: T\n      error: unknown\n    }\n\nexport type DeferredPromise<T> = Promise<T> & {\n  [TSR_DEFERRED_PROMISE]: DeferredPromiseState<T>\n}\n\nexport function defer<T>(\n  _promise: Promise<T>,\n  options?: {\n    serializeError?: typeof defaultSerializeError\n  },\n) {\n  const promise = _promise as DeferredPromise<T>\n  // this is already deferred promise\n  if ((promise as any)[TSR_DEFERRED_PROMISE]) {\n    return promise\n  }\n  promise[TSR_DEFERRED_PROMISE] = { status: 'pending' }\n\n  promise\n    .then((data) => {\n      promise[TSR_DEFERRED_PROMISE].status = 'success'\n      promise[TSR_DEFERRED_PROMISE].data = data\n    })\n    .catch((error) => {\n      promise[TSR_DEFERRED_PROMISE].status = 'error'\n      ;(promise[TSR_DEFERRED_PROMISE] as any).error = {\n        data: (options?.serializeError ?? defaultSerializeError)(error),\n        __isServerError: true,\n      }\n    })\n\n  return promise\n}\n"],"mappings":";AAEa,MAAAA,oBAAA,GAAuBC,MAAA,CAAOC,GAAA,CAAI,sBAAsB;AAsBrD,SAAAC,MACdC,QAAA,EACAC,OAAA,EAGA;EACA,MAAMC,OAAA,GAAUF,QAAA;EAEX,IAAAE,OAAA,CAAgBN,oBAAoB,GAAG;IACnC,OAAAM,OAAA;EAAA;EAETA,OAAA,CAAQN,oBAAoB,IAAI;IAAEO,MAAA,EAAQ;EAAU;EAGjDD,OAAA,CAAAE,IAAA,CAAMC,IAAA,IAAS;IACNH,OAAA,CAAAN,oBAAoB,EAAEO,MAAA,GAAS;IAC/BD,OAAA,CAAAN,oBAAoB,EAAES,IAAA,GAAOA,IAAA;EAAA,CACtC,EACAC,KAAA,CAAOC,KAAA,IAAU;IACRL,OAAA,CAAAN,oBAAoB,EAAEO,MAAA,GAAS;IACrCD,OAAA,CAAQN,oBAAoB,EAAUW,KAAA,GAAQ;MAC9CF,IAAA,IAAOJ,OAAA,oBAAAA,OAAA,CAASO,cAAA,KAAkBC,qBAAA,EAAuBF,KAAK;MAC9DG,eAAA,EAAiB;IACnB;EAAA,CACD;EAEI,OAAAR,OAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}