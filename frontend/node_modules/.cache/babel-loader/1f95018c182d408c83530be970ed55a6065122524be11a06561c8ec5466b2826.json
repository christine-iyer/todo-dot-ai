{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { Matches } from \"./Matches.js\";\nimport { getRouterContext } from \"./routerContext.js\";\nfunction RouterContextProvider({\n  router,\n  children,\n  ...rest\n}) {\n  router.update({\n    ...router.options,\n    ...rest,\n    context: {\n      ...router.options.context,\n      ...rest.context\n    }\n  });\n  const routerContext = getRouterContext();\n  const provider = /* @__PURE__ */jsx(routerContext.Provider, {\n    value: router,\n    children\n  });\n  if (router.options.Wrap) {\n    return /* @__PURE__ */jsx(router.options.Wrap, {\n      children: provider\n    });\n  }\n  return provider;\n}\nfunction RouterProvider({\n  router,\n  ...rest\n}) {\n  return /* @__PURE__ */jsx(RouterContextProvider, {\n    router,\n    ...rest,\n    children: /* @__PURE__ */jsx(Matches, {})\n  });\n}\nexport { RouterContextProvider, RouterProvider };","map":{"version":3,"names":["RouterContextProvider","router","children","rest","update","options","context","routerContext","getRouterContext","provider","jsx","Provider","value","Wrap","RouterProvider","Matches"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/RouterProvider.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Matches } from './Matches'\nimport { getRouterContext } from './routerContext'\nimport type {\n  AnyRouter,\n  RegisteredRouter,\n  RouterOptions,\n} from '@tanstack/router-core'\n\nexport function RouterContextProvider<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n>({\n  router,\n  children,\n  ...rest\n}: RouterProps<TRouter, TDehydrated> & {\n  children: React.ReactNode\n}) {\n  // Allow the router to update options on the router instance\n  router.update({\n    ...router.options,\n    ...rest,\n    context: {\n      ...router.options.context,\n      ...rest.context,\n    },\n  } as any)\n\n  const routerContext = getRouterContext()\n\n  const provider = (\n    <routerContext.Provider value={router as AnyRouter}>\n      {children}\n    </routerContext.Provider>\n  )\n\n  if (router.options.Wrap) {\n    return <router.options.Wrap>{provider}</router.options.Wrap>\n  }\n\n  return provider\n}\n\nexport function RouterProvider<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n>({ router, ...rest }: RouterProps<TRouter, TDehydrated>) {\n  return (\n    <RouterContextProvider router={router} {...rest}>\n      <Matches />\n    </RouterContextProvider>\n  )\n}\n\nexport type RouterProps<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n> = Omit<\n  RouterOptions<\n    TRouter['routeTree'],\n    NonNullable<TRouter['options']['trailingSlash']>,\n    NonNullable<TRouter['options']['defaultStructuralSharing']>,\n    TRouter['history'],\n    TDehydrated\n  >,\n  'context'\n> & {\n  router: TRouter\n  context?: Partial<\n    RouterOptions<\n      TRouter['routeTree'],\n      NonNullable<TRouter['options']['trailingSlash']>,\n      NonNullable<TRouter['options']['defaultStructuralSharing']>,\n      TRouter['history'],\n      TDehydrated\n    >['context']\n  >\n}\n"],"mappings":";;;AASO,SAASA,sBAGd;EACAC,MAAA;EACAC,QAAA;EACA,GAAGC;AACL,GAEG;EAEDF,MAAA,CAAOG,MAAA,CAAO;IACZ,GAAGH,MAAA,CAAOI,OAAA;IACV,GAAGF,IAAA;IACHG,OAAA,EAAS;MACP,GAAGL,MAAA,CAAOI,OAAA,CAAQC,OAAA;MAClB,GAAGH,IAAA,CAAKG;IAAA;EACV,CACM;EAER,MAAMC,aAAA,GAAgBC,gBAAA,CAAiB;EAEvC,MAAMC,QAAA,GACH,eAAAC,GAAA,CAAAH,aAAA,CAAcI,QAAA,EAAd;IAAuBC,KAAA,EAAOX,MAAA;IAC5BC;EAAA,CACH;EAGE,IAAAD,MAAA,CAAOI,OAAA,CAAQQ,IAAA,EAAM;IACvB,OAAQ,eAAAH,GAAA,CAAAT,MAAA,CAAOI,OAAA,CAAQQ,IAAA,EAAf;MAAqBX,QAAA,EAASO;IAAA;EAAA;EAGjC,OAAAA,QAAA;AACT;AAEO,SAASK,eAGd;EAAEb,MAAA;EAAQ,GAAGE;AAAA,GAA2C;EACxD,sBAAAO,GAAA,CACGV,qBAAA,EAAsB;IAAAC,MAAA;IAAiB,GAAGE,IAAA;IACzCD,QAAA,iBAAAQ,GAAA,CAACK,OAAA,GAAQ;EAAA,CACX;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}