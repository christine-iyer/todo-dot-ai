{"ast":null,"code":"import * as React from \"react\";\nimport { createElement } from \"react\";\nimport { Asset } from \"./Asset.js\";\nimport { useRouter } from \"./useRouter.js\";\nimport { useRouterState } from \"./useRouterState.js\";\nconst useTags = () => {\n  const router = useRouter();\n  const routeMeta = useRouterState({\n    select: state => {\n      return state.matches.map(match => match.meta).filter(Boolean);\n    }\n  });\n  const meta = React.useMemo(() => {\n    const resultMeta = [];\n    const metaByAttribute = {};\n    let title;\n    [...routeMeta].reverse().forEach(metas => {\n      [...metas].reverse().forEach(m => {\n        if (!m) return;\n        if (m.title) {\n          if (!title) {\n            title = {\n              tag: \"title\",\n              children: m.title\n            };\n          }\n        } else {\n          const attribute = m.name ?? m.property;\n          if (attribute) {\n            if (metaByAttribute[attribute]) {\n              return;\n            } else {\n              metaByAttribute[attribute] = true;\n            }\n          }\n          resultMeta.push({\n            tag: \"meta\",\n            attrs: {\n              ...m\n            }\n          });\n        }\n      });\n    });\n    if (title) {\n      resultMeta.push(title);\n    }\n    resultMeta.reverse();\n    return resultMeta;\n  }, [routeMeta]);\n  const links = useRouterState({\n    select: state => state.matches.map(match => match.links).filter(Boolean).flat(1).map(link => ({\n      tag: \"link\",\n      attrs: {\n        ...link\n      }\n    })),\n    structuralSharing: true\n  });\n  const preloadMeta = useRouterState({\n    select: state => {\n      const preloadMeta2 = [];\n      state.matches.map(match => router.looseRoutesById[match.routeId]).forEach(route => {\n        var _a, _b, _c, _d;\n        return (_d = (_c = (_b = (_a = router.ssr) == null ? void 0 : _a.manifest) == null ? void 0 : _b.routes[route.id]) == null ? void 0 : _c.preloads) == null ? void 0 : _d.filter(Boolean).forEach(preload => {\n          preloadMeta2.push({\n            tag: \"link\",\n            attrs: {\n              rel: \"modulepreload\",\n              href: preload\n            }\n          });\n        });\n      });\n      return preloadMeta2;\n    },\n    structuralSharing: true\n  });\n  const headScripts = useRouterState({\n    select: state => state.matches.map(match => match.headScripts).flat(1).filter(Boolean).map(({\n      children,\n      ...script\n    }) => ({\n      tag: \"script\",\n      attrs: {\n        ...script\n      },\n      children\n    })),\n    structuralSharing: true\n  });\n  return uniqBy([...meta, ...preloadMeta, ...links, ...headScripts], d => {\n    return JSON.stringify(d);\n  });\n};\nfunction HeadContent() {\n  const tags = useTags();\n  return tags.map(tag => /* @__PURE__ */createElement(Asset, {\n    ...tag,\n    key: `tsr-meta-${JSON.stringify(tag)}`\n  }));\n}\nfunction uniqBy(arr, fn) {\n  const seen = /* @__PURE__ */new Set();\n  return arr.filter(item => {\n    const key = fn(item);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n}\nexport { HeadContent, useTags };","map":{"version":3,"names":["useTags","router","useRouter","routeMeta","useRouterState","select","state","matches","map","match","meta","filter","Boolean","React","useMemo","resultMeta","metaByAttribute","title","reverse","forEach","metas","m","tag","children","attribute","name","property","push","attrs","links","flat","link","structuralSharing","preloadMeta","preloadMeta2","looseRoutesById","routeId","route","_d","_c","_b","_a","ssr","manifest","routes","id","preloads","preload","rel","href","headScripts","script","uniqBy","d","JSON","stringify","HeadContent","tags","createElement","Asset","key","arr","fn","seen","Set","item","has","add"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/HeadContent.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Asset } from './Asset'\nimport { useRouter } from './useRouter'\nimport { useRouterState } from './useRouterState'\nimport type { RouterManagedTag } from '@tanstack/router-core'\n\nexport const useTags = () => {\n  const router = useRouter()\n\n  const routeMeta = useRouterState({\n    select: (state) => {\n      return state.matches.map((match) => match.meta!).filter(Boolean)\n    },\n  })\n\n  const meta: Array<RouterManagedTag> = React.useMemo(() => {\n    const resultMeta: Array<RouterManagedTag> = []\n    const metaByAttribute: Record<string, true> = {}\n    let title: RouterManagedTag | undefined\n    ;[...routeMeta].reverse().forEach((metas) => {\n      ;[...metas].reverse().forEach((m) => {\n        if (!m) return\n\n        if (m.title) {\n          if (!title) {\n            title = {\n              tag: 'title',\n              children: m.title,\n            }\n          }\n        } else {\n          const attribute = m.name ?? m.property\n          if (attribute) {\n            if (metaByAttribute[attribute]) {\n              return\n            } else {\n              metaByAttribute[attribute] = true\n            }\n          }\n\n          resultMeta.push({\n            tag: 'meta',\n            attrs: {\n              ...m,\n            },\n          })\n        }\n      })\n    })\n\n    if (title) {\n      resultMeta.push(title)\n    }\n\n    resultMeta.reverse()\n\n    return resultMeta\n  }, [routeMeta])\n\n  const links = useRouterState({\n    select: (state) =>\n      state.matches\n        .map((match) => match.links!)\n        .filter(Boolean)\n        .flat(1)\n        .map((link) => ({\n          tag: 'link',\n          attrs: {\n            ...link,\n          },\n        })) as Array<RouterManagedTag>,\n    structuralSharing: true as any,\n  })\n\n  const preloadMeta = useRouterState({\n    select: (state) => {\n      const preloadMeta: Array<RouterManagedTag> = []\n\n      state.matches\n        .map((match) => router.looseRoutesById[match.routeId]!)\n        .forEach((route) =>\n          router.ssr?.manifest?.routes[route.id]?.preloads\n            ?.filter(Boolean)\n            .forEach((preload) => {\n              preloadMeta.push({\n                tag: 'link',\n                attrs: {\n                  rel: 'modulepreload',\n                  href: preload,\n                },\n              })\n            }),\n        )\n\n      return preloadMeta\n    },\n    structuralSharing: true as any,\n  })\n\n  const headScripts = useRouterState({\n    select: (state) =>\n      (\n        state.matches\n          .map((match) => match.headScripts!)\n          .flat(1)\n          .filter(Boolean) as Array<RouterManagedTag>\n      ).map(({ children, ...script }) => ({\n        tag: 'script',\n        attrs: {\n          ...script,\n        },\n        children,\n      })),\n    structuralSharing: true as any,\n  })\n\n  return uniqBy(\n    [\n      ...meta,\n      ...preloadMeta,\n      ...links,\n      ...headScripts,\n    ] as Array<RouterManagedTag>,\n    (d) => {\n      return JSON.stringify(d)\n    },\n  )\n}\n\n/**\n * @description The `HeadContent` component is used to render meta tags, links, and scripts for the current route.\n * It should be rendered in the `<head>` of your document.\n */\nexport function HeadContent() {\n  const tags = useTags()\n  return tags.map((tag) => (\n    <Asset {...tag} key={`tsr-meta-${JSON.stringify(tag)}`} />\n  ))\n}\n\nfunction uniqBy<T>(arr: Array<T>, fn: (item: T) => string) {\n  const seen = new Set<string>()\n  return arr.filter((item) => {\n    const key = fn(item)\n    if (seen.has(key)) {\n      return false\n    }\n    seen.add(key)\n    return true\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}