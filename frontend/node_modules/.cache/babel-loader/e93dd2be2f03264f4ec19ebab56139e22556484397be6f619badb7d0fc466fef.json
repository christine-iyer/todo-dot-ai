{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { BaseRouteApi, notFound, BaseRoute, BaseRootRoute } from \"@tanstack/router-core\";\nimport React__default from \"react\";\nimport { useLoaderData } from \"./useLoaderData.js\";\nimport { useLoaderDeps } from \"./useLoaderDeps.js\";\nimport { useParams } from \"./useParams.js\";\nimport { useSearch } from \"./useSearch.js\";\nimport { useNavigate } from \"./useNavigate.js\";\nimport { useMatch } from \"./useMatch.js\";\nimport { useRouter } from \"./useRouter.js\";\nimport { Link } from \"./link.js\";\nfunction getRouteApi(id) {\n  return new RouteApi({\n    id\n  });\n}\nclass RouteApi extends BaseRouteApi {\n  /**\n   * @deprecated Use the `getRouteApi` function instead.\n   */\n  constructor({\n    id\n  }) {\n    super({\n      id\n    });\n    this.useMatch = opts => {\n      return useMatch({\n        select: opts == null ? void 0 : opts.select,\n        from: this.id,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing\n      });\n    };\n    this.useRouteContext = opts => {\n      return useMatch({\n        from: this.id,\n        select: d => (opts == null ? void 0 : opts.select) ? opts.select(d.context) : d.context\n      });\n    };\n    this.useSearch = opts => {\n      return useSearch({\n        select: opts == null ? void 0 : opts.select,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing,\n        from: this.id\n      });\n    };\n    this.useParams = opts => {\n      return useParams({\n        select: opts == null ? void 0 : opts.select,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing,\n        from: this.id\n      });\n    };\n    this.useLoaderDeps = opts => {\n      return useLoaderDeps({\n        ...opts,\n        from: this.id,\n        strict: false\n      });\n    };\n    this.useLoaderData = opts => {\n      return useLoaderData({\n        ...opts,\n        from: this.id,\n        strict: false\n      });\n    };\n    this.useNavigate = () => {\n      const router = useRouter();\n      return useNavigate({\n        from: router.routesById[this.id].fullPath\n      });\n    };\n    this.notFound = opts => {\n      return notFound({\n        routeId: this.id,\n        ...opts\n      });\n    };\n    this.Link = React__default.forwardRef((props, ref) => {\n      const router = useRouter();\n      const fullPath = router.routesById[this.id].fullPath;\n      return /* @__PURE__ */jsx(Link, {\n        ref,\n        from: fullPath,\n        ...props\n      });\n    });\n  }\n}\nclass Route extends BaseRoute {\n  /**\n   * @deprecated Use the `createRoute` function instead.\n   */\n  constructor(options) {\n    super(options);\n    this.useMatch = opts => {\n      return useMatch({\n        select: opts == null ? void 0 : opts.select,\n        from: this.id,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing\n      });\n    };\n    this.useRouteContext = opts => {\n      return useMatch({\n        ...opts,\n        from: this.id,\n        select: d => (opts == null ? void 0 : opts.select) ? opts.select(d.context) : d.context\n      });\n    };\n    this.useSearch = opts => {\n      return useSearch({\n        select: opts == null ? void 0 : opts.select,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing,\n        from: this.id\n      });\n    };\n    this.useParams = opts => {\n      return useParams({\n        select: opts == null ? void 0 : opts.select,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing,\n        from: this.id\n      });\n    };\n    this.useLoaderDeps = opts => {\n      return useLoaderDeps({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useLoaderData = opts => {\n      return useLoaderData({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useNavigate = () => {\n      return useNavigate({\n        from: this.fullPath\n      });\n    };\n    this.Link = React__default.forwardRef((props, ref) => {\n      return /* @__PURE__ */jsx(Link, {\n        ref,\n        from: this.fullPath,\n        ...props\n      });\n    });\n    this.$$typeof = Symbol.for(\"react.memo\");\n  }\n}\nfunction createRoute(options) {\n  return new Route(options);\n}\nfunction createRootRouteWithContext() {\n  return options => {\n    return createRootRoute(options);\n  };\n}\nconst rootRouteWithContext = createRootRouteWithContext;\nclass RootRoute extends BaseRootRoute {\n  /**\n   * @deprecated `RootRoute` is now an internal implementation detail. Use `createRootRoute()` instead.\n   */\n  constructor(options) {\n    super(options);\n    this.useMatch = opts => {\n      return useMatch({\n        select: opts == null ? void 0 : opts.select,\n        from: this.id,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing\n      });\n    };\n    this.useRouteContext = opts => {\n      return useMatch({\n        ...opts,\n        from: this.id,\n        select: d => (opts == null ? void 0 : opts.select) ? opts.select(d.context) : d.context\n      });\n    };\n    this.useSearch = opts => {\n      return useSearch({\n        select: opts == null ? void 0 : opts.select,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing,\n        from: this.id\n      });\n    };\n    this.useParams = opts => {\n      return useParams({\n        select: opts == null ? void 0 : opts.select,\n        structuralSharing: opts == null ? void 0 : opts.structuralSharing,\n        from: this.id\n      });\n    };\n    this.useLoaderDeps = opts => {\n      return useLoaderDeps({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useLoaderData = opts => {\n      return useLoaderData({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useNavigate = () => {\n      return useNavigate({\n        from: this.fullPath\n      });\n    };\n    this.Link = React__default.forwardRef((props, ref) => {\n      return /* @__PURE__ */jsx(Link, {\n        ref,\n        from: this.fullPath,\n        ...props\n      });\n    });\n    this.$$typeof = Symbol.for(\"react.memo\");\n  }\n}\nfunction createRootRoute(options) {\n  return new RootRoute(options);\n}\nfunction createRouteMask(opts) {\n  return opts;\n}\nclass NotFoundRoute extends Route {\n  constructor(options) {\n    super({\n      ...options,\n      id: \"404\"\n    });\n  }\n}\nexport { NotFoundRoute, RootRoute, Route, RouteApi, createRootRoute, createRootRouteWithContext, createRoute, createRouteMask, getRouteApi, rootRouteWithContext };","map":{"version":3,"names":["getRouteApi","id","RouteApi","BaseRouteApi","constructor","useMatch","opts","select","from","structuralSharing","useRouteContext","d","context","useSearch","useParams","useLoaderDeps","strict","useLoaderData","useNavigate","router","useRouter","routesById","fullPath","notFound","routeId","Link","React__default","forwardRef","props","ref","jsx","Route","BaseRoute","options","$$typeof","Symbol","for","createRoute","createRootRouteWithContext","createRootRoute","rootRouteWithContext","RootRoute","BaseRootRoute","createRouteMask","NotFoundRoute"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/route.tsx"],"sourcesContent":["import {\n  BaseRootRoute,\n  BaseRoute,\n  BaseRouteApi,\n  notFound,\n} from '@tanstack/router-core'\nimport React from 'react'\nimport { useLoaderData } from './useLoaderData'\nimport { useLoaderDeps } from './useLoaderDeps'\nimport { useParams } from './useParams'\nimport { useSearch } from './useSearch'\nimport { useNavigate } from './useNavigate'\nimport { useMatch } from './useMatch'\nimport { useRouter } from './useRouter'\nimport { Link } from './link'\nimport type {\n  AnyContext,\n  AnyRoute,\n  AnyRouter,\n  ConstrainLiteral,\n  ErrorComponentProps,\n  NotFoundError,\n  NotFoundRouteProps,\n  RegisteredRouter,\n  ResolveFullPath,\n  ResolveId,\n  ResolveParams,\n  RootRouteId,\n  RootRouteOptions,\n  RouteConstraints,\n  RouteIds,\n  RouteMask,\n  RouteOptions,\n  RouteTypesById,\n  RouterCore,\n  ToMaskOptions,\n  UseNavigateResult,\n} from '@tanstack/router-core'\nimport type { UseLoaderDataRoute } from './useLoaderData'\nimport type { UseMatchRoute } from './useMatch'\nimport type { UseLoaderDepsRoute } from './useLoaderDeps'\nimport type { UseParamsRoute } from './useParams'\nimport type { UseSearchRoute } from './useSearch'\nimport type { UseRouteContextRoute } from './useRouteContext'\nimport type { LinkComponentRoute } from './link'\n\ndeclare module '@tanstack/router-core' {\n  export interface UpdatableRouteOptionsExtensions {\n    component?: RouteComponent\n    errorComponent?: false | null | ErrorRouteComponent\n    notFoundComponent?: NotFoundRouteComponent\n    pendingComponent?: RouteComponent\n  }\n\n  export interface RouteExtensions<\n    in out TId extends string,\n    in out TFullPath extends string,\n  > {\n    useMatch: UseMatchRoute<TId>\n    useRouteContext: UseRouteContextRoute<TId>\n    useSearch: UseSearchRoute<TId>\n    useParams: UseParamsRoute<TId>\n    useLoaderDeps: UseLoaderDepsRoute<TId>\n    useLoaderData: UseLoaderDataRoute<TId>\n    useNavigate: () => UseNavigateResult<TFullPath>\n    Link: LinkComponentRoute<TFullPath>\n  }\n}\n\nexport function getRouteApi<\n  const TId,\n  TRouter extends AnyRouter = RegisteredRouter,\n>(id: ConstrainLiteral<TId, RouteIds<TRouter['routeTree']>>) {\n  return new RouteApi<TId, TRouter>({ id })\n}\n\nexport class RouteApi<\n  TId,\n  TRouter extends AnyRouter = RegisteredRouter,\n> extends BaseRouteApi<TId, TRouter> {\n  /**\n   * @deprecated Use the `getRouteApi` function instead.\n   */\n  constructor({ id }: { id: TId }) {\n    super({ id })\n  }\n\n  useMatch: UseMatchRoute<TId> = (opts) => {\n    return useMatch({\n      select: opts?.select,\n      from: this.id,\n      structuralSharing: opts?.structuralSharing,\n    } as any) as any\n  }\n\n  useRouteContext: UseRouteContextRoute<TId> = (opts) => {\n    return useMatch({\n      from: this.id as any,\n      select: (d) => (opts?.select ? opts.select(d.context) : d.context),\n    }) as any\n  }\n\n  useSearch: UseSearchRoute<TId> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useSearch({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.id,\n    } as any) as any\n  }\n\n  useParams: UseParamsRoute<TId> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useParams({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.id,\n    } as any) as any\n  }\n\n  useLoaderDeps: UseLoaderDepsRoute<TId> = (opts) => {\n    return useLoaderDeps({ ...opts, from: this.id, strict: false } as any)\n  }\n\n  useLoaderData: UseLoaderDataRoute<TId> = (opts) => {\n    return useLoaderData({ ...opts, from: this.id, strict: false } as any)\n  }\n\n  useNavigate = (): UseNavigateResult<\n    RouteTypesById<TRouter, TId>['fullPath']\n  > => {\n    const router = useRouter()\n    return useNavigate({ from: router.routesById[this.id as string].fullPath })\n  }\n\n  notFound = (opts?: NotFoundError) => {\n    return notFound({ routeId: this.id as string, ...opts })\n  }\n\n  Link: LinkComponentRoute<RouteTypesById<TRouter, TId>['fullPath']> =\n    React.forwardRef((props, ref: React.ForwardedRef<HTMLAnchorElement>) => {\n      const router = useRouter()\n      const fullPath = router.routesById[this.id as string].fullPath\n      return <Link ref={ref} from={fullPath as never} {...props} />\n    }) as unknown as LinkComponentRoute<\n      RouteTypesById<TRouter, TId>['fullPath']\n    >\n}\n\nexport class Route<\n  in out TParentRoute extends RouteConstraints['TParentRoute'] = AnyRoute,\n  in out TPath extends RouteConstraints['TPath'] = '/',\n  in out TFullPath extends RouteConstraints['TFullPath'] = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  in out TCustomId extends RouteConstraints['TCustomId'] = string,\n  in out TId extends RouteConstraints['TId'] = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  in out TSearchValidator = undefined,\n  in out TParams = ResolveParams<TPath>,\n  in out TRouterContext = AnyContext,\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n  in out TLoaderDeps extends Record<string, any> = {},\n  in out TLoaderFn = undefined,\n  in out TChildren = unknown,\n  in out TFileRouteTypes = unknown,\n> extends BaseRoute<\n  TParentRoute,\n  TPath,\n  TFullPath,\n  TCustomId,\n  TId,\n  TSearchValidator,\n  TParams,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren,\n  TFileRouteTypes\n> {\n  /**\n   * @deprecated Use the `createRoute` function instead.\n   */\n  constructor(\n    options?: RouteOptions<\n      TParentRoute,\n      TId,\n      TCustomId,\n      TFullPath,\n      TPath,\n      TSearchValidator,\n      TParams,\n      TLoaderDeps,\n      TLoaderFn,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n  ) {\n    super(options)\n    ;(this as any).$$typeof = Symbol.for('react.memo')\n  }\n\n  useMatch: UseMatchRoute<TId> = (opts) => {\n    return useMatch({\n      select: opts?.select,\n      from: this.id,\n      structuralSharing: opts?.structuralSharing,\n    } as any) as any\n  }\n\n  useRouteContext: UseRouteContextRoute<TId> = (opts?) => {\n    return useMatch({\n      ...opts,\n      from: this.id,\n      select: (d) => (opts?.select ? opts.select(d.context) : d.context),\n    }) as any\n  }\n\n  useSearch: UseSearchRoute<TId> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useSearch({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.id,\n    } as any) as any\n  }\n\n  useParams: UseParamsRoute<TId> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useParams({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.id,\n    } as any) as any\n  }\n\n  useLoaderDeps: UseLoaderDepsRoute<TId> = (opts) => {\n    return useLoaderDeps({ ...opts, from: this.id } as any)\n  }\n\n  useLoaderData: UseLoaderDataRoute<TId> = (opts) => {\n    return useLoaderData({ ...opts, from: this.id } as any)\n  }\n\n  useNavigate = (): UseNavigateResult<TFullPath> => {\n    return useNavigate({ from: this.fullPath })\n  }\n\n  Link: LinkComponentRoute<TFullPath> = React.forwardRef(\n    (props, ref: React.ForwardedRef<HTMLAnchorElement>) => {\n      return <Link ref={ref} from={this.fullPath as never} {...props} />\n    },\n  ) as unknown as LinkComponentRoute<TFullPath>\n}\n\nexport function createRoute<\n  TParentRoute extends RouteConstraints['TParentRoute'] = AnyRoute,\n  TPath extends RouteConstraints['TPath'] = '/',\n  TFullPath extends RouteConstraints['TFullPath'] = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  TCustomId extends RouteConstraints['TCustomId'] = string,\n  TId extends RouteConstraints['TId'] = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  TSearchValidator = undefined,\n  TParams = ResolveParams<TPath>,\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TChildren = unknown,\n>(\n  options: RouteOptions<\n    TParentRoute,\n    TId,\n    TCustomId,\n    TFullPath,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    AnyContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >,\n): Route<\n  TParentRoute,\n  TPath,\n  TFullPath,\n  TCustomId,\n  TId,\n  TSearchValidator,\n  TParams,\n  AnyContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren\n> {\n  return new Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    AnyContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren\n  >(options)\n}\n\nexport type AnyRootRoute = RootRoute<any, any, any, any, any, any, any, any>\n\nexport function createRootRouteWithContext<TRouterContext extends {}>() {\n  return <\n    TRouteContextFn = AnyContext,\n    TBeforeLoadFn = AnyContext,\n    TSearchValidator = undefined,\n    TLoaderDeps extends Record<string, any> = {},\n    TLoaderFn = undefined,\n  >(\n    options?: RootRouteOptions<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >,\n  ) => {\n    return createRootRoute<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >(options as any)\n  }\n}\n\n/**\n * @deprecated Use the `createRootRouteWithContext` function instead.\n */\nexport const rootRouteWithContext = createRootRouteWithContext\n\nexport class RootRoute<\n  in out TSearchValidator = undefined,\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n  in out TLoaderDeps extends Record<string, any> = {},\n  in out TLoaderFn = undefined,\n  in out TChildren = unknown,\n  in out TFileRouteTypes = unknown,\n> extends BaseRootRoute<\n  TSearchValidator,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren,\n  TFileRouteTypes\n> {\n  /**\n   * @deprecated `RootRoute` is now an internal implementation detail. Use `createRootRoute()` instead.\n   */\n  constructor(\n    options?: RootRouteOptions<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >,\n  ) {\n    super(options)\n    ;(this as any).$$typeof = Symbol.for('react.memo')\n  }\n\n  useMatch: UseMatchRoute<RootRouteId> = (opts) => {\n    return useMatch({\n      select: opts?.select,\n      from: this.id,\n      structuralSharing: opts?.structuralSharing,\n    } as any) as any\n  }\n\n  useRouteContext: UseRouteContextRoute<RootRouteId> = (opts) => {\n    return useMatch({\n      ...opts,\n      from: this.id,\n      select: (d) => (opts?.select ? opts.select(d.context) : d.context),\n    }) as any\n  }\n\n  useSearch: UseSearchRoute<RootRouteId> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useSearch({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.id,\n    } as any) as any\n  }\n\n  useParams: UseParamsRoute<RootRouteId> = (opts) => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return useParams({\n      select: opts?.select,\n      structuralSharing: opts?.structuralSharing,\n      from: this.id,\n    } as any) as any\n  }\n\n  useLoaderDeps: UseLoaderDepsRoute<RootRouteId> = (opts) => {\n    return useLoaderDeps({ ...opts, from: this.id } as any)\n  }\n\n  useLoaderData: UseLoaderDataRoute<RootRouteId> = (opts) => {\n    return useLoaderData({ ...opts, from: this.id } as any)\n  }\n\n  useNavigate = (): UseNavigateResult<'/'> => {\n    return useNavigate({ from: this.fullPath })\n  }\n\n  Link: LinkComponentRoute<'/'> = React.forwardRef(\n    (props, ref: React.ForwardedRef<HTMLAnchorElement>) => {\n      return <Link ref={ref} from={this.fullPath} {...props} />\n    },\n  ) as unknown as LinkComponentRoute<'/'>\n}\n\nexport function createRootRoute<\n  TSearchValidator = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n>(\n  options?: RootRouteOptions<\n    TSearchValidator,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn\n  >,\n): RootRoute<\n  TSearchValidator,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  unknown,\n  unknown\n> {\n  return new RootRoute<\n    TSearchValidator,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn\n  >(options)\n}\n\nexport function createRouteMask<\n  TRouteTree extends AnyRoute,\n  TFrom extends string,\n  TTo extends string,\n>(\n  opts: {\n    routeTree: TRouteTree\n  } & ToMaskOptions<RouterCore<TRouteTree, 'never', boolean>, TFrom, TTo>,\n): RouteMask<TRouteTree> {\n  return opts as any\n}\n\nexport type ReactNode = any\n\nexport type SyncRouteComponent<TProps> =\n  | ((props: TProps) => ReactNode)\n  | React.LazyExoticComponent<(props: TProps) => ReactNode>\n\nexport type AsyncRouteComponent<TProps> = SyncRouteComponent<TProps> & {\n  preload?: () => Promise<void>\n}\n\nexport type RouteComponent<TProps = any> = AsyncRouteComponent<TProps>\n\nexport type ErrorRouteComponent = RouteComponent<ErrorComponentProps>\n\nexport type NotFoundRouteComponent = SyncRouteComponent<NotFoundRouteProps>\n\nexport class NotFoundRoute<\n  TParentRoute extends AnyRootRoute,\n  TRouterContext = AnyContext,\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TSearchValidator = undefined,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TChildren = unknown,\n> extends Route<\n  TParentRoute,\n  '/404',\n  '/404',\n  '404',\n  '404',\n  TSearchValidator,\n  {},\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren\n> {\n  constructor(\n    options: Omit<\n      RouteOptions<\n        TParentRoute,\n        string,\n        string,\n        string,\n        string,\n        TSearchValidator,\n        {},\n        TLoaderDeps,\n        TLoaderFn,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n      | 'path'\n      | 'id'\n      | 'params'\n    >,\n  ) {\n    super({\n      ...(options as any),\n      id: '404',\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}