{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useRouteContext(opts) {\n  return useMatch({\n    ...opts,\n    select: match => opts.select ? opts.select(match.context) : match.context\n  });\n}\nexport { useRouteContext };","map":{"version":3,"names":["useRouteContext","opts","useMatch","select","match","context"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/useRouteContext.ts"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type {\n  AnyRouter,\n  RegisteredRouter,\n  UseRouteContextBaseOptions,\n  UseRouteContextOptions,\n  UseRouteContextResult,\n} from '@tanstack/router-core'\n\nexport type UseRouteContextRoute<out TFrom> = <\n  TRouter extends AnyRouter = RegisteredRouter,\n  TSelected = unknown,\n>(\n  opts?: UseRouteContextBaseOptions<TRouter, TFrom, true, TSelected>,\n) => UseRouteContextResult<TRouter, TFrom, true, TSelected>\n\nexport function useRouteContext<\n  TRouter extends AnyRouter = RegisteredRouter,\n  const TFrom extends string | undefined = undefined,\n  TStrict extends boolean = true,\n  TSelected = unknown,\n>(\n  opts: UseRouteContextOptions<TRouter, TFrom, TStrict, TSelected>,\n): UseRouteContextResult<TRouter, TFrom, TStrict, TSelected> {\n  return useMatch({\n    ...(opts as any),\n    select: (match) =>\n      opts.select ? opts.select(match.context) : match.context,\n  }) as UseRouteContextResult<TRouter, TFrom, TStrict, TSelected>\n}\n"],"mappings":";AAgBO,SAASA,gBAMdC,IAAA,EAC2D;EAC3D,OAAOC,QAAA,CAAS;IACd,GAAID,IAAA;IACJE,MAAA,EAASC,KAAA,IACPH,IAAA,CAAKE,MAAA,GAASF,IAAA,CAAKE,MAAA,CAAOC,KAAA,CAAMC,OAAO,IAAID,KAAA,CAAMC;EAAA,CACpD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}