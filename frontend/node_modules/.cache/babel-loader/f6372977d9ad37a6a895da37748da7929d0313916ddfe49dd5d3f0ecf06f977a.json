{"ast":null,"code":"import { useRouterState } from \"./useRouterState.js\";\nfunction useLocation(opts) {\n  return useRouterState({\n    select: state => (opts == null ? void 0 : opts.select) ? opts.select(state.location) : state.location\n  });\n}\nexport { useLocation };","map":{"version":3,"names":["useLocation","opts","useRouterState","select","state","location"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/useLocation.tsx"],"sourcesContent":["import { useRouterState } from './useRouterState'\nimport type {\n  StructuralSharingOption,\n  ValidateSelected,\n} from './structuralSharing'\nimport type {\n  AnyRouter,\n  RegisteredRouter,\n  RouterState,\n} from '@tanstack/router-core'\n\nexport interface UseLocationBaseOptions<\n  TRouter extends AnyRouter,\n  TSelected,\n  TStructuralSharing extends boolean = boolean,\n> {\n  select?: (\n    state: RouterState<TRouter['routeTree']>['location'],\n  ) => ValidateSelected<TRouter, TSelected, TStructuralSharing>\n}\n\nexport type UseLocationResult<\n  TRouter extends AnyRouter,\n  TSelected,\n> = unknown extends TSelected\n  ? RouterState<TRouter['routeTree']>['location']\n  : TSelected\n\nexport function useLocation<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TSelected = unknown,\n  TStructuralSharing extends boolean = boolean,\n>(\n  opts?: UseLocationBaseOptions<TRouter, TSelected, TStructuralSharing> &\n    StructuralSharingOption<TRouter, TSelected, TStructuralSharing>,\n): UseLocationResult<TRouter, TSelected> {\n  return useRouterState({\n    select: (state: any) =>\n      opts?.select ? opts.select(state.location) : state.location,\n  } as any) as UseLocationResult<TRouter, TSelected>\n}\n"],"mappings":";AA4BO,SAASA,YAKdC,IAAA,EAEuC;EACvC,OAAOC,cAAA,CAAe;IACpBC,MAAA,EAASC,KAAA,KACPH,IAAA,oBAAAA,IAAA,CAAME,MAAA,IAASF,IAAA,CAAKE,MAAA,CAAOC,KAAA,CAAMC,QAAQ,IAAID,KAAA,CAAMC;EAAA,CAC/C;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}