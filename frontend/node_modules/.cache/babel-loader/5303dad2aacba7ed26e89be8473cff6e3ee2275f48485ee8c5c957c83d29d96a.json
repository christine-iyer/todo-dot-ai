{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useLoaderDeps(opts) {\n  const {\n    select,\n    ...rest\n  } = opts;\n  return useMatch({\n    ...rest,\n    select: s => {\n      return select ? select(s.loaderDeps) : s.loaderDeps;\n    }\n  });\n}\nexport { useLoaderDeps };","map":{"version":3,"names":["useLoaderDeps","opts","select","rest","useMatch","s","loaderDeps"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/useLoaderDeps.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type {\n  StructuralSharingOption,\n  ValidateSelected,\n} from './structuralSharing'\nimport type {\n  AnyRouter,\n  RegisteredRouter,\n  ResolveUseLoaderDeps,\n  StrictOrFrom,\n  UseLoaderDepsResult,\n} from '@tanstack/router-core'\n\nexport interface UseLoaderDepsBaseOptions<\n  TRouter extends AnyRouter,\n  TFrom,\n  TSelected,\n  TStructuralSharing,\n> {\n  select?: (\n    deps: ResolveUseLoaderDeps<TRouter, TFrom>,\n  ) => ValidateSelected<TRouter, TSelected, TStructuralSharing>\n}\n\nexport type UseLoaderDepsOptions<\n  TRouter extends AnyRouter,\n  TFrom extends string | undefined,\n  TSelected,\n  TStructuralSharing,\n> = StrictOrFrom<TRouter, TFrom> &\n  UseLoaderDepsBaseOptions<TRouter, TFrom, TSelected, TStructuralSharing> &\n  StructuralSharingOption<TRouter, TSelected, TStructuralSharing>\n\nexport type UseLoaderDepsRoute<out TId> = <\n  TRouter extends AnyRouter = RegisteredRouter,\n  TSelected = unknown,\n  TStructuralSharing extends boolean = boolean,\n>(\n  opts?: UseLoaderDepsBaseOptions<TRouter, TId, TSelected, TStructuralSharing> &\n    StructuralSharingOption<TRouter, TSelected, false>,\n) => UseLoaderDepsResult<TRouter, TId, TSelected>\n\nexport function useLoaderDeps<\n  TRouter extends AnyRouter = RegisteredRouter,\n  const TFrom extends string | undefined = undefined,\n  TSelected = unknown,\n  TStructuralSharing extends boolean = boolean,\n>(\n  opts: UseLoaderDepsOptions<TRouter, TFrom, TSelected, TStructuralSharing>,\n): UseLoaderDepsResult<TRouter, TFrom, TSelected> {\n  const { select, ...rest } = opts\n  return useMatch({\n    ...rest,\n    select: (s) => {\n      return select ? select(s.loaderDeps) : s.loaderDeps\n    },\n  }) as UseLoaderDepsResult<TRouter, TFrom, TSelected>\n}\n"],"mappings":";AA0CO,SAASA,cAMdC,IAAA,EACgD;EAChD,MAAM;IAAEC,MAAA;IAAQ,GAAGC;EAAA,IAASF,IAAA;EAC5B,OAAOG,QAAA,CAAS;IACd,GAAGD,IAAA;IACHD,MAAA,EAASG,CAAA,IAAM;MACb,OAAOH,MAAA,GAASA,MAAA,CAAOG,CAAA,CAAEC,UAAU,IAAID,CAAA,CAAEC,UAAA;IAAA;EAC3C,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}