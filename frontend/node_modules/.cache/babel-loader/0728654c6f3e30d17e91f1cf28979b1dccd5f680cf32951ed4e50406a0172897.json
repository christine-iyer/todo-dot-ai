{"ast":null,"code":"import { useStore } from \"@tanstack/react-store\";\nimport { useRef } from \"react\";\nimport { replaceEqualDeep } from \"@tanstack/router-core\";\nimport { useRouter } from \"./useRouter.js\";\nfunction useRouterState(opts) {\n  const contextRouter = useRouter({\n    warn: (opts == null ? void 0 : opts.router) === void 0\n  });\n  const router = (opts == null ? void 0 : opts.router) || contextRouter;\n  const previousResult = useRef(void 0);\n  return useStore(router.__store, state => {\n    if (opts == null ? void 0 : opts.select) {\n      if (opts.structuralSharing ?? router.options.defaultStructuralSharing) {\n        const newSlice = replaceEqualDeep(previousResult.current, opts.select(state));\n        previousResult.current = newSlice;\n        return newSlice;\n      }\n      return opts.select(state);\n    }\n    return state;\n  });\n}\nexport { useRouterState };","map":{"version":3,"names":["useRouterState","opts","contextRouter","useRouter","warn","router","previousResult","useRef","useStore","__store","state","select","structuralSharing","options","defaultStructuralSharing","newSlice","replaceEqualDeep","current"],"sources":["/Users/christineiyer/Documents/tan-stack-learning/todo-dot-ai/frontend/node_modules/@tanstack/react-router/src/useRouterState.tsx"],"sourcesContent":["import { useStore } from '@tanstack/react-store'\nimport { useRef } from 'react'\nimport { replaceEqualDeep } from '@tanstack/router-core'\nimport { useRouter } from './useRouter'\nimport type {\n  AnyRouter,\n  RegisteredRouter,\n  RouterState,\n} from '@tanstack/router-core'\nimport type {\n  StructuralSharingOption,\n  ValidateSelected,\n} from './structuralSharing'\n\nexport type UseRouterStateOptions<\n  TRouter extends AnyRouter,\n  TSelected,\n  TStructuralSharing,\n> = {\n  router?: TRouter\n  select?: (\n    state: RouterState<TRouter['routeTree']>,\n  ) => ValidateSelected<TRouter, TSelected, TStructuralSharing>\n} & StructuralSharingOption<TRouter, TSelected, TStructuralSharing>\n\nexport type UseRouterStateResult<\n  TRouter extends AnyRouter,\n  TSelected,\n> = unknown extends TSelected ? RouterState<TRouter['routeTree']> : TSelected\n\nexport function useRouterState<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TSelected = unknown,\n  TStructuralSharing extends boolean = boolean,\n>(\n  opts?: UseRouterStateOptions<TRouter, TSelected, TStructuralSharing>,\n): UseRouterStateResult<TRouter, TSelected> {\n  const contextRouter = useRouter<TRouter>({\n    warn: opts?.router === undefined,\n  })\n  const router = opts?.router || contextRouter\n  const previousResult =\n    useRef<ValidateSelected<TRouter, TSelected, TStructuralSharing>>(undefined)\n\n  return useStore(router.__store, (state) => {\n    if (opts?.select) {\n      if (opts.structuralSharing ?? router.options.defaultStructuralSharing) {\n        const newSlice = replaceEqualDeep(\n          previousResult.current,\n          opts.select(state),\n        )\n        previousResult.current = newSlice\n        return newSlice\n      }\n      return opts.select(state)\n    }\n    return state\n  }) as UseRouterStateResult<TRouter, TSelected>\n}\n"],"mappings":";;;;AA8BO,SAASA,eAKdC,IAAA,EAC0C;EAC1C,MAAMC,aAAA,GAAgBC,SAAA,CAAmB;IACvCC,IAAA,GAAMH,IAAA,oBAAAA,IAAA,CAAMI,MAAA,MAAW;EAAA,CACxB;EACK,MAAAA,MAAA,IAASJ,IAAA,oBAAAA,IAAA,CAAMI,MAAA,KAAUH,aAAA;EACzB,MAAAI,cAAA,GACJC,MAAA,CAAiE,MAAS;EAE5E,OAAOC,QAAA,CAASH,MAAA,CAAOI,OAAA,EAAUC,KAAA,IAAU;IACzC,IAAIT,IAAA,oBAAAA,IAAA,CAAMU,MAAA,EAAQ;MAChB,IAAIV,IAAA,CAAKW,iBAAA,IAAqBP,MAAA,CAAOQ,OAAA,CAAQC,wBAAA,EAA0B;QACrE,MAAMC,QAAA,GAAWC,gBAAA,CACfV,cAAA,CAAeW,OAAA,EACfhB,IAAA,CAAKU,MAAA,CAAOD,KAAK,CACnB;QACAJ,cAAA,CAAeW,OAAA,GAAUF,QAAA;QAClB,OAAAA,QAAA;MAAA;MAEF,OAAAd,IAAA,CAAKU,MAAA,CAAOD,KAAK;IAAA;IAEnB,OAAAA,KAAA;EAAA,CACR;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}